// Generated by CoffeeScript 1.8.0

/*
 * /v3/user下的接口
 */

(function() {
  var RequestUrIs, debuglog, delAppFlag, friendsVipInfo, getAppFlag, getInfo, getMultiInfo, helps, isAreaLogin, isLogin, isSetup, isVip, request, sendGamebarMsg, totalVipInfo, _makeReqOptions;

  debuglog = require("debug")("wanba_tools::users");

  request = require('request');

  RequestUrIs = require("../enums/request_uris");

  helps = require("../utils/helps");

  _makeReqOptions = helps.makeReqOptions;


  /*
   * 获取玩家信息（QQ昵称、头像、性别）
   * params:
   *     openid  必须  string  与APP通信的用户key。从平台跳转到应用时会调用应用的CanvasURL，平台会在CanvasURL后带上本参数。由平台直接传给应用，应用原样传给平台即可。
   *     openkey 必须  string  session key。
   *     userip    string  用户的IP。
   *
   * 内部补充得参数：
   *     appid 必须  unsigned int  应用的唯一ID。可以通过appid查找APP基本信息。
   *     sig 必须  string  请求串的签名，以appkey作为密钥，具体签名算法见腾讯开放平台第三方应用签名参数sig的说明。
   *     pf  必须  string  应用的来源平台。从平台跳转到应用时会调用应用的CanvasURL，平台会在CanvasURL后带上本参数。由平台直接传给应用，应用原样传给平台即可。
   *     format    string  定义API返回的数据格式。取值说明：为xml时表示返回的格式是xml；为json时表示返回的格式是json。
   *           注意：json、xml为小写，否则将不识别。format不传或非xml，则返回json格式数据。
   * return json 根据应用平台的不同，返回的数据会不相同
   */

  getInfo = function(params, method, callback) {
    var options;
    if (method == null) {
      method = 'POST';
    }
    options = _makeReqOptions(this, RequestUrIs.GET_INFO_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null, body);
    });
  };


  /*
   * 获取多个玩家信息（QQ昵称、头像、性别）, 只返回安装了应用玩家信息
   * params:
   *     openid  必须  string  与APP通信的用户key。从平台跳转到应用时会调用应用的CanvasURL，平台会在CanvasURL后带上本参数。由平台直接传给应用，应用原样传给平台即可。
   *     openkey 必须  string  session key。
   *     fopenids 必须 string 需要获取数据的openid列表，中间以_隔开，每次最多100个。
   *     userip    string  用户的IP。
   *
   * 内部补充得参数：
   *     appid 必须  unsigned int  应用的唯一ID。可以通过appid查找APP基本信息。
   *     sig 必须  string  请求串的签名，以appkey作为密钥，具体签名算法见腾讯开放平台第三方应用签名参数sig的说明。
   *     pf  必须  string  应用的来源平台。从平台跳转到应用时会调用应用的CanvasURL，平台会在CanvasURL后带上本参数。由平台直接传给应用，应用原样传给平台即可。
   *     format    string  定义API返回的数据格式。取值说明：为xml时表示返回的格式是xml；为json时表示返回的格式是json。
   *           注意：json、xml为小写，否则将不识别。format不传或非xml，则返回json格式数据。
   * return {
   *   "ret": 0
   *   "is_lost": 0
   *   "items"[
   *     {玩家信息},{玩家信息}
   *   ]
   * }
   */

  getMultiInfo = function(params, method, callback) {
    var options;
    if (method == null) {
      method = 'POST';
    }
    options = _makeReqOptions(this, RequestUrIs.GET_MULTI_INFO_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null, body);
    });
  };


  /*
   * 发送玩吧消息
   * params 同getInfo
   *   frd 是  string  好友openid
   *   msgtype 是  int 消息类型，1-pk消息，2-送心消息，3-超越消息
   *   content 是  string  超越消息的积分文字，形如“10秒”，“100分”之类
   *   qua 是  string  手机空间版本标识，例如：V1_AND_QZ_4.9.3_148_RDM_T
   */

  sendGamebarMsg = function(params, method, callback) {
    var options;
    if (method == null) {
      method = 'POST';
    }
    options = _makeReqOptions(this, RequestUrIs.SEND_GAMEBAR_MSG, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null);
    });
  };


  /*
   * 判断玩家是否登录平台, 可以用来openkey 续期（openkey 有效时间2个小时）
   * callback 没有错误就表示玩家已登录
   */

  isLogin = function(params, method, callback) {
    var options;
    if (method == null) {
      method = 'POST';
    }
    options = _makeReqOptions(this, RequestUrIs.IS_LOGIN_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null);
    });
  };

  totalVipInfo = function(params, method, callback) {
    var options;
    options = _makeReqOptions(this, RequestUrIs.TOTAL_VIP_INFO_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null, body);
    });
  };

  isVip = function(params, method, callback) {
    var options;
    options = _makeReqOptions(this, RequestUrIs.IS_VIP_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null, body);
    });
  };

  friendsVipInfo = function(params, method, callback) {
    var options;
    options = _makeReqOptions(this, RequestUrIs.FRIENDS_VIP_INFO_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null, body);
    });
  };

  isSetup = function(params, method, callback) {
    var options;
    options = _makeReqOptions(this, RequestUrIs.IS_SETUP_URI, method, params);
    request(options, function(err, res, body) {
      var isSetuped;
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      isSetuped = body.setuped === 1 ? true : false;
      return callback(null, isSetuped);
    });
  };

  getAppFlag = function(params, method, callback) {
    var options;
    options = _makeReqOptions(this, RequestUrIs.GET_APP_FLAG_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null, body.customflag);
    });
  };

  delAppFlag = function(params, method, callback) {
    var options;
    options = _makeReqOptions(this, RequestUrIs.DEL_APP_FLAG_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null);
    });
  };

  isAreaLogin = function(params, method, callback) {
    var options;
    options = _makeReqOptions(this, RequestUrIs.IS_AREA_LOGIN_URI, method, params);
    request(options, function(err, res, body) {
      if (err != null) {
        return callback(err);
      }
      if ((body.ret != null) && body.ret !== 0) {
        return callback(new Error("errCode: " + body.ret + " message: " + body.msg));
      }
      return callback(null);
    });
  };

  module.exports = {
    getInfo: getInfo,
    getMultiInfo: getMultiInfo,
    sendGamebarMsg: sendGamebarMsg,
    isLogin: isLogin,
    totalVipInfo: totalVipInfo,
    isVip: isVip,
    friendsVipInfo: friendsVipInfo,
    isSetup: isSetup,
    getAppFlag: getAppFlag,
    delAppFlag: delAppFlag,
    isAreaLogin: isAreaLogin
  };

}).call(this);
