// Generated by CoffeeScript 1.8.0
(function() {
  var WanbaTools, config, options, params, should, wbt, _;

  should = require("should");

  _ = require('underscore');

  config = require('../config/config');

  WanbaTools = require("../wanba_tools");

  options = config;

  wbt = new WanbaTools(options);

  console.dir(wbt);

  params = {
    openid: "11111111111111111",
    openkey: "2222222222222222"
  };

  describe("test users", function() {
    before(function() {});
    describe("getInfo", function() {
      return it("should get info", function(done) {
        return wbt.getInfo(params, function(err, info) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(info);
          return done();
        });
      });
    });
    describe("getMultiInfo", function() {
      return it("should get multi info", function(done) {
        params.fopenids = "" + params.openid + "_" + params.openid;
        return wbt.getMultiInfo(params, function(err, info) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(info);
          delete params.fopenids;
          return done();
        });
      });
    });
    describe("setAchievement", function() {
      return it("should set achievement", function(done) {
        params.user_attr = {
          level: 1,
          key1: 2292992
        };
        return wbt.setAchievement(params, function(err) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          delete params.user_attr;
          return done();
        });
      });
    });
    describe("getGamebarRanklist", function() {
      return it("should get gamebar ranklist", function(done) {
        params.rankdim = "key1";
        params.rank_start = 0;
        params.pull_cnt = 50;
        params.direction = 0;
        return wbt.getGamebarRanklist(params, function(err, ranklist) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(ranklist);
          delete params.rankdim;
          delete params.rank_start;
          delete params.pull_cnt;
          delete params.direction;
          return done();
        });
      });
    });
    describe("buyPlayzoneItem", function() {
      return it("should buy playzone itemt", function(done) {
        params.zoneid = 1;
        params.itemid = 'fiash_001';
        params.count = 2;
        return wbt.buyPlayzoneItem(params, function(err, result) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(result);
          delete params.zoneid;
          delete params.itemid;
          delete params.count;
          return done();
        });
      });
    });
    describe("getPlayzoneUserinfo", function() {
      return it("should get playzone userinfo", function(done) {
        params.zoneid = 1;
        return wbt.getPlayzoneUserinfo(params, function(err, result) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(result);
          delete params.zoneid;
          return done();
        });
      });
    });
    describe("sendGamebarMsg", function() {
      return it("should send gamebar msg", function(done) {
        params.frd = "222222222222";
        params.msgtype = "1";
        params.content = "100åˆ†";
        params.qua = "V1_AND_QZ_4.9.3_148_RDM_T";
        return wbt.sendGamebarMsg(params, function(err) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          delete params.frd;
          delete params.msgtype;
          delete params.content;
          delete params.qua;
          return done();
        });
      });
    });
    return describe("isLogin", function() {
      return it("should is login", function(done) {
        return wbt.isLogin(params, function(err) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          return done();
        });
      });
    });
  });

}).call(this);
