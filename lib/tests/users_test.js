// Generated by CoffeeScript 1.8.0
(function() {
  var WanbaTools, config, method, params, should, wbt, wbtOptions, _;

  should = require("should");

  _ = require('underscore');

  config = require("../config/test_config");

  WanbaTools = require("../wanba_tools");

  wbtOptions = config;

  wbt = new WanbaTools(wbtOptions);

  console.dir(wbt);

  params = {
    openid: config.openid,
    openkey: config.openkey
  };

  method = 'POST';

  describe("test users", function() {
    before(function() {});
    describe("getInfo", function() {
      return it("should get info", function(done) {
        var options;
        options = {
          "openid": "" + params.openid,
          "openkey": "" + params.openkey
        };
        return wbt.getInfo(options, method, function(err, info) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(info);
          return done();
        });
      });
    });
    describe("getMultiInfo", function() {
      return it("should get multi info", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          fopenids: "" + params.openid + "_" + params.openid
        };
        return wbt.getMultiInfo(options, method, function(err, info) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(info);
          return done();
        });
      });
    });
    describe("buyPlayzoneItem", function() {
      return it("should buy playzone itemt", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          zoneid: 1,
          itemid: 'fiash_001',
          count: 2
        };
        return wbt.buyPlayzoneItem(options, method, function(err, result) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(result);
          return done();
        });
      });
    });
    describe("getPlayzoneUserinfo", function() {
      return it("should get playzone userinfo", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          zoneid: 1
        };
        return wbt.getPlayzoneUserinfo(options, method, function(err, result) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(result);
          return done();
        });
      });
    });
    describe("sendGamebarMsg", function() {
      return it("should send gamebar msg", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          frd: "222222222222",
          msgtype: "1",
          content: "100åˆ†",
          qua: "V1_AND_QZ_4.9.3_148_RDM_T"
        };
        return wbt.sendGamebarMsg(options, method, function(err) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          return done();
        });
      });
    });
    describe("isLogin", function() {
      return it("should is login", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey
        };
        return wbt.isLogin(options, method, function(err) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          return done();
        });
      });
    });
    describe("totalVipInfo", function() {
      return it("should total vip info", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          member_vip: 1,
          blue_vip: 1,
          yellow_vip: 1,
          red_vip: 1,
          green_vip: 1,
          pink_vip: 1,
          superqq: 1,
          is_3366: 1
        };
        return wbt.totalVipInfo(options, method, function(err, result) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(result);
          return done();
        });
      });
    });
    describe("isVip", function() {
      return it("should is vip", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey
        };
        return wbt.isVip(options, method, function(err, result) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(result);
          return done();
        });
      });
    });
    describe("friendsVipInfo", function() {
      return it("should friends vip info", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          fopenids: params.openid
        };
        return wbt.friendsVipInfo(options, method, function(err, result) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.dir(result);
          return done();
        });
      });
    });
    describe("isSetup", function() {
      return it("should is setup", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey
        };
        return wbt.isSetup(options, method, function(err, isSetuped) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.log(isSetuped);
          return done();
        });
      });
    });
    describe("getAppFlag", function() {
      return it("should get app flag", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey
        };
        return wbt.getAppFlag(options, method, function(err, customflag) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          console.log("customflag: " + customflag);
          return done();
        });
      });
    });
    describe("delAppFlag", function() {
      return it("should del app flag", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          acttype: 1,
          usergroupid: 2323
        };
        return wbt.delAppFlag(options, method, function(err) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          return done();
        });
      });
    });
    return describe("isAreaLogin", function() {
      return it("should is area login", function(done) {
        var options;
        options = {
          openid: params.openid,
          openkey: params.openkey,
          seqid: "afdasfadsfasd"
        };
        return wbt.isAreaLogin(options, method, function(err) {
          if (err != null) {
            console.error("ERROR:: " + err);
          }
          return done();
        });
      });
    });
  });

}).call(this);
